#!/usr/bin/env node
var colors = require('colors');
var path = require('path');
var fs = require('fs');
var argv = require('optimist').argv;

var dir = path.resolve(__dirname, '..', 'node_modules', 'karma', 'lib');

var printHelpMessage = function () {
  var helpMessage = [
    'usage: stig [command] [options]',
    '  commands:',
    '    no command - run the tests with the settings in browserstig.conf.js',
    '    init - initialize a default configuration',
    '  options:',
    '    -h or --help - show this help message',
    '    -v or --version - show the browserstig version',
    '    --browser [Browser Name] - override the browser in browserstig.conf.js',
    '    --automatedUrl [url] - override the automated url in browserstig.conf.js'
  ].join('\n');
  console.log(helpMessage.cyan);
};

var printVersion = function () {
  var packageJSON = fs.readFileSync(__dirname + '/../package.json').toString();
  var packageObj = JSON.parse(packageJSON);
  var versionMessage = [
    ('browserstig version ' + packageObj.version).bold,
    'http://justspamjustin.github.io/BrowserStig',
    'Licence: MIT'
  ].join('\n');
  console.log(versionMessage.cyan);
};

var runInit = function () {
  var config = fs.readFileSync(__dirname + '/../init/default.browserstig.conf.js');
  fs.writeFileSync('browserstig.conf.js', config);
  var main = fs.readFileSync(__dirname + '/../init/default.main.js');
  fs.writeFileSync('main.js', main);
  console.log('[Success] Created browserstig.conf.js.');
};

var runBrowserStig = function () {
  require(path.join(dir, 'server')).start({configFile: __dirname + '/../karma.conf.js'});
};

var cli = require(path.join(dir, 'cli'));
if (argv.h || argv.help) {
  printHelpMessage();
} else if(argv.v || argv.version) {
  printVersion();
} else if (argv._.length > 0 && argv._[0] === 'init') {
  runInit();
} else {
  runBrowserStig();
}
